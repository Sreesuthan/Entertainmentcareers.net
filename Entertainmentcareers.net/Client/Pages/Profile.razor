@layout ProfileLayout
@page "/profile"
@using Entertainmentcareers.net.Shared;
@using Microsoft.AspNetCore.Authorization
@using System.Net.Http.Headers;
@attribute [Authorize]
@inject AuthenticationStateProvider AuthStateProvider
@inject MudBlazor.ISnackbar snackBar
@inject HttpClient Http
@inject ILocalStorageService LocalStorage
@inject IJSRuntime Js
@inject NavigationManager navigationManager

<MudGrid Justify="Justify.Center" Class="mt-8 mb-8">
    <MudItem xs="10">
        <MudGrid Justify="Justify.Center" Class="border">
            <MudItem xs="12">
                <MudText Typo="Typo.h4" Style="font-family: 'Inter';font-weight: 700; color:#08243D;" Class="pb-2">Account Overview</MudText>
                <MudText Typo="Typo.h6" Style="font-family: 'Inter'; color:#08243D;" Class="pb-2">Welcome back to your account, <b>@user.FirstName.</b></MudText>
            </MudItem>
            <MudItem xs="6">
                <MudGrid Class="mb-2" Justify="Justify.Center">
                    <MudItem xs="12">
                        <MudCard Style="background-color:#EEF5F8">
                            <MudCardContent>
                                 <MudGrid>
                                     <MudItem xs="12">
                                         <MudText Typo="Typo.h6" Style="font-family: 'Inter'; color:#08243D;" Class="border-bottom"><b>Account Information</b></MudText>
                                     </MudItem>
                                     <MudItem xs="2">
                                         <MudText Typo="Typo.subtitle2" Style="font-family: 'Inter';color:#08243D;"><b>Login ID:</b></MudText>
                                     </MudItem>
                                     <MudItem xs="10">
                                        <MudText Typo="Typo.body2" Style="font-family: 'Inter';color:#08243D;">@user.Email</MudText>
                                        <MudFab Size="Size.Small" OnClick="()=>LogOut()" Class="mt-6" Style="@($"background-color:{Colors.Indigo.Lighten4}; text-transform:none;")" Label="Change Login"></MudFab>
                                        <MudFab Size="Size.Small" Style="@($"background-color:{Colors.Indigo.Lighten4}; text-transform:none;")" Class="mt-6" Label="Change Password"></MudFab>
                                     </MudItem>
                                    <MudItem xs="2">
                                        <MudText Typo="Typo.subtitle2" Style="font-family: 'Inter';color:#08243D;"><b>Name:</b></MudText>
                                    </MudItem>
                                    <MudItem xs="10">
                                        <MudText Typo="Typo.body2" Style="font-family: 'Inter';color:#08243D;">@user.FirstName @user.LastName</MudText>
                                    </MudItem>
                                    <MudItem xs="2">
                                        <MudText Typo="Typo.subtitle2" Style="font-family: 'Inter';color:#08243D;"><b>Address:</b></MudText>
                                    </MudItem>
                                    <MudItem xs="10">
                                        <MudText Typo="Typo.body2" Style="font-family: 'Inter';color:#08243D;">@user.Street,<br />@user.City, @user.State, @user.Zip</MudText>
                                        <MudFab Size="Size.Small" OnClick="()=>EditProfile(user.Email)" Class="mt-6" Style="@($"background-color:{Colors.Indigo.Lighten4}; text-transform:none;")" Label="Change Personal Information"></MudFab>
                                    </MudItem>
                                 </MudGrid>
                            </MudCardContent>
                        </MudCard>
                    </MudItem>
                    <MudItem xs="12">
                        <MudCard Style="background-color:#EEF5F8">
                            <MudCardContent>
                                <MudGrid>
                                     <MudItem xs="12">
                                         <MudText Typo="Typo.h6" Style="font-family: 'Inter'; color:#08243D;" Class="border-bottom"><b>Billing Information</b></MudText>
                                     </MudItem>
                                     <MudItem xs="2">
                                         <MudText Typo="Typo.subtitle2" Style="font-family: 'Inter';color:#08243D;"><b>Type:</b></MudText>
                                     </MudItem>
                                     <MudItem xs="10">
                                         <MudText Typo="Typo.body2" Style="font-family: 'Inter';color:#08243D;">@user.PlanType</MudText>
                                     </MudItem>
                                    <MudItem xs="2">
                                        <MudText Typo="Typo.subtitle2" Style="font-family: 'Inter';color:#08243D;"><b>Expires:</b></MudText>
                                    </MudItem>
                                    <MudItem xs="10">
                                        <MudText Typo="Typo.body2" Style="font-family: 'Inter';color:#08243D;">#Expire Date</MudText>
                                        <MudFab Size="Size.Small" Class="mt-6" Style="@($"background-color:{Colors.Indigo.Lighten4}; text-transform:none;")" Label="Billing Details"></MudFab>
                                        <MudFab Size="Size.Small" Class="mt-6" Style="background-color: #689F38; color: #FFFFFF;text-transform:none;" Label="Renew"></MudFab>
                                        <MudFab Size="Size.Small" Class="mt-6" Style="@($"background-color:{Colors.Indigo.Lighten4}; text-transform:none;")" Label="Cancel"></MudFab>
                                    </MudItem>
                                 </MudGrid>
                            </MudCardContent>
                        </MudCard>
                    </MudItem>
                </MudGrid>
            </MudItem>
            <MudItem xs="6">
                <MudGrid Justify="Justify.Center">
                    <MudItem xs="12">
                        <MudCard Style="background-color:#EEF5F8">
                            <MudCardContent>
                                <MudGrid>
                                    <MudItem xs="12">
                                        <MudText Typo="Typo.h6" Style="font-family: 'Inter'; color:#08243D;" Class="border-bottom"><b>Resumes</b></MudText>
                                        @{
                                            if(user.ResumeOriginalFileName.Length > 0)
                                            {
                                                <MudText Style="font-family: 'Inter'; color:#08243D;" Class="mt-4" Typo="Typo.subtitle1">Resume Uploaded</MudText>
                                            }
                                            else
                                            {
                                                <MudText Typo="Typo.subtitle2">@user.ResumeOriginalFileName</MudText>
                                                <MudFileUpload id="fileInput2" T="IBrowserFile" Accept=".doc, .docx, .pdf" OnFilesChanged="OnFileChangeResume" MaximumFileCount="1" />
                                                <MudFab HtmlTag="label" Size="Size.Small" StartIcon="@Icons.Material.Filled.CloudUpload" IconSize="Size.Small" Class="mt-2" for="fileInput2" Style="@($"background-color:{Colors.Indigo.Lighten4}; text-transform:none;")" Label="Add Resume"></MudFab>
                                            }
                                        }
                                    </MudItem>
                                </MudGrid>
                            </MudCardContent>
                        </MudCard>
                    </MudItem>
                    <MudItem xs="12">
                        <MudCard Style="background-color:#EEF5F8">
                            <MudCardContent>
                                <MudGrid>
                                    <MudItem xs="12">
                                        <MudText Typo="Typo.h6" Style="font-family: 'Inter'; color:#08243D;" Class="border-bottom"><b>Cover Letters</b></MudText>
                                        @{
                                            if (user.CoverOriginalFileName.Length > 0)
                                            {
                                                <MudText Style="font-family: 'Inter'; color:#08243D;" Class="mt-4" Typo="Typo.subtitle1">Cover Letter Uploaded</MudText>
                                            }
                                            else
                                            {
                                                <MudText Typo="Typo.subtitle2">@user.CoverOriginalFileName</MudText>
                                                <MudFileUpload id="fileInput2" T="IBrowserFile" Accept=".doc, .docx, .pdf" OnFilesChanged="OnFileChangeCover" MaximumFileCount="1" />
                                                <MudFab HtmlTag="label" Size="Size.Small" StartIcon="@Icons.Material.Filled.CloudUpload" IconSize="Size.Small" Class="mt-2" for="fileInput2" Style="@($"background-color:{Colors.Indigo.Lighten4}; text-transform:none;")" Label="Add Cover Letter"></MudFab>
                                            }
                                        }
                                    </MudItem>
                                </MudGrid>
                            </MudCardContent>
                        </MudCard>
                    </MudItem>
                    <MudItem xs="12">
                        <MudCard Style="background-color:#EEF5F8">
                            <MudCardContent>
                                <MudGrid>
                                    <MudItem xs="12">
                                        <MudText Typo="Typo.h6" Style="font-family: 'Inter'; color:#08243D;" Class="border-bottom"><b>Personalization & Email Alerts</b></MudText>
                                    </MudItem>
                                    <MudItem xs="3">
                                        <MudText Typo="Typo.subtitle2" Style="font-family: 'Inter';color:#08243D;"><b>Email Alert:</b></MudText>
                                    </MudItem>
                                    <MudItem xs="9">
                                        <MudText Typo="Typo.body2" Style="font-family: 'Inter';color:#08243D;">#Alert</MudText>
                                    </MudItem>
                                    <MudItem xs="3">
                                        <MudText Typo="Typo.subtitle2" Style="font-family: 'Inter';color:#08243D;"><b>Categories:</b></MudText>
                                    </MudItem>
                                    <MudItem xs="9">
                                        <MudText Typo="Typo.body2" Style="font-family: 'Inter';color:#08243D;">#Category</MudText>
                                    </MudItem>
                                    <MudItem xs="3">
                                        <MudText Typo="Typo.subtitle2" Style="font-family: 'Inter';color:#08243D;"><b>Locations:</b></MudText>
                                    </MudItem>
                                    <MudItem xs="9">
                                        <MudText Typo="Typo.body2" Style="font-family: 'Inter';color:#08243D;">#Location</MudText>
                                    </MudItem>
                                    <MudItem xs="12">
                                        <MudText Typo="Typo.caption" Style="font-family: 'Inter'; color:#08243D;">You have not set your email preferences.<br />You can receive a daily or weekly email that will include all jobs that meet your profile.</MudText>
                                        <br/>
                                        <MudFab Size="Size.Small" Class="mt-2" Style="background-color: #689F38; color: #FFFFFF; text-transform:none;" Label="Set Your Preferences"></MudFab>
                                    </MudItem>
                                </MudGrid>
                            </MudCardContent>
                        </MudCard>
                    </MudItem>
                </MudGrid>
            </MudItem>
        </MudGrid>
    </MudItem>
</MudGrid>


@code {
    ApplicationUser user = new ApplicationUser();
    List<ApplicationUser> users = new List<ApplicationUser>();
    private List<FileUpload> fileUploads = new List<FileUpload>();
    private string filename = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        var appUser = (await AuthStateProvider.GetAuthenticationStateAsync()).User.Identity;

        if (appUser != null && appUser.IsAuthenticated)
        {
            var username = appUser.Name;
            var result = await Http.GetFromJsonAsync<ApplicationUser>($"api/ApplicationUser/user/{username}");
            if (result != null)
            {
                user = result;
            }
        }
    }

    void EditProfile(string username)
    {
        navigationManager.NavigateTo($"editprofile/{username}");
    }

    async Task LogOut()
    {
        if (!await Js.InvokeAsync<bool>("confirm", "Are you want to change login?"))
        {
            return;
        }
        else
        {
            await LocalStorage.RemoveItemAsync("token");
            await AuthStateProvider.GetAuthenticationStateAsync();
            snackBar.Add("Logged Out Successfully...!", Severity.Success);
            navigationManager.NavigateTo("signin");
        }
    }

    private async Task OnFileChangeResume(InputFileChangeEventArgs e)
    {
        if (IsValidExtensionDoc(e.File))
        {
            using var content = new MultipartFormDataContent();
            foreach (var file in e.GetMultipleFiles(int.MaxValue))
            {
                var fileContent = new StreamContent(file.OpenReadStream(long.MaxValue));
                fileContent.Headers.ContentType = new MediaTypeHeaderValue(file.ContentType);
                filename = file.Name;
                content.Add(content: fileContent, name: "\"files\"", fileName: file.Name);
            }

            var response = await Http.PostAsync("/api/File", content);
            var newUploadresults = await response.Content.ReadFromJsonAsync<List<FileUpload>>();
            if (newUploadresults != null)
            {
                fileUploads = fileUploads.Concat(newUploadresults).ToList();
            }

            var fileUpload = fileUploads.SingleOrDefault(f => f.OriginalFileName == filename);
            if (fileUpload != null)
            {
                user.ResumePath = fileUpload.FilePath;
                user.ResumeFileContentType = fileUpload.FileContentType;
                user.ResumeOriginalFileName = fileUpload.OriginalFileName;
                user.ResumeStoredFileName = fileUpload.StoredFileName;

                var result = await Http.PutAsJsonAsync("api/ApplicationUser", user);
                var response1 = await result.Content.ReadFromJsonAsync<List<ApplicationUser>>();
                if(response1 != null)
                {
                    users = response1;
                    snackBar.Add("Resume Uploaded Successfully", Severity.Success);
                    navigationManager.NavigateTo("profile");
                }
            }
        }
        else
        {
            snackBar.Add("Please select .doc, .docx, .pdf files only...", Severity.Warning);
        }
    }

    private async Task OnFileChangeCover(InputFileChangeEventArgs e)
    {
        if (IsValidExtensionDoc(e.File))
        {
            using var content = new MultipartFormDataContent();
            foreach (var file in e.GetMultipleFiles(int.MaxValue))
            {
                var fileContent = new StreamContent(file.OpenReadStream(long.MaxValue));
                fileContent.Headers.ContentType = new MediaTypeHeaderValue(file.ContentType);
                filename = file.Name;
                content.Add(content: fileContent, name: "\"files\"", fileName: file.Name);
            }

            var response = await Http.PostAsync("/api/File", content);
            var newUploadresults = await response.Content.ReadFromJsonAsync<List<FileUpload>>();
            if (newUploadresults != null)
            {
                fileUploads = fileUploads.Concat(newUploadresults).ToList();
            }

            var fileUpload = fileUploads.SingleOrDefault(f => f.OriginalFileName == filename);
            if (fileUpload != null)
            {
                user.CoverLetterPath = fileUpload.FilePath;
                user.CoverFileContentType = fileUpload.FileContentType;
                user.CoverOriginalFileName = fileUpload.OriginalFileName;
                user.CoverStoredFileName = fileUpload.StoredFileName;

                var result = await Http.PutAsJsonAsync("api/ApplicationUser", user);
                var response1 = await result.Content.ReadFromJsonAsync<List<ApplicationUser>>();
                if (response1 != null)
                {
                    users = response1;
                    snackBar.Add("Cover Letter Uploaded Successfully", Severity.Success);
                    navigationManager.NavigateTo("profile");
                }
            }
        }
        else
        {
            snackBar.Add("Please select .doc, .docx, .pdf files only...", Severity.Warning);
        }
    }

    bool IsValidExtensionDoc(IBrowserFile file2)
    {
        bool isValid = false;
        string[] fileExtension = { ".doc", ".docx", ".pdf" };
        for (int i = 0; i <= fileExtension.Length - 1; i++)
        {
            if (file2.Name.Contains(fileExtension[i]))
            {
                isValid = true;
                break;
            }
            else
            {
                isValid = false;
            }
        }

        return isValid;
    }
}
