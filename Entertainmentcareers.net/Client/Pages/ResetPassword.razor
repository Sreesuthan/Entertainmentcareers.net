@layout MembershipLayout
@page "/resetpassword/{token}"
@using Entertainmentcareers.net.Shared;
@inject HttpClient Http
@inject NavigationManager navigationManager
@inject MudBlazor.ISnackbar snackBar


<MudGrid Justify="Justify.Center" Class="mt-8 mb-8">
    <MudItem xs="10">
        <MudGrid Justify="Justify.Center">
            <MudItem xs="6" Class="border rounded-1">
                <EditForm Model="resetPassword" OnValidSubmit="HandleSubmit">
                <DataAnnotationsValidator />
                <MudGrid Class="mb-2" Spacing="1">
                    <MudItem xs="12">
                            <MudText Typo="Typo.h4" Class="mb-2 border-bottom" Style="font-family: 'Inter';font-weight: 700; color:#08243D;">Reset Password</MudText>
                    </MudItem>
                    <MudItem xs="6">
                            <MudTextField Label="Email" @bind-Value="resetPassword.Email" Margin="Margin.Dense" Required="true" Variant="Variant.Outlined" For="@(()=>resetPassword.Email)"></MudTextField>
                    </MudItem>
                        <MudItem xs="1">
                            <MudTooltip Placement="Placement.Top" Text="Please enter valid email address only.">
                                <MudIconButton Style="color:#08243D;" Icon="@Icons.Material.Outlined.Info" />
                            </MudTooltip>
                        </MudItem>
                        <MudItem xs="6">
                            <MudTextField Label="Password" @bind-Value="resetPassword.Password" Required="true" Margin="Margin.Dense" Variant="Variant.Outlined" For="@(()=>resetPassword.Password)" HelperText="(Min. 6 characters, digit (0-9), uppercase(A-Z) and special character.)" InputType="@PasswordInput" Adornment="Adornment.End" AdornmentIcon="@PasswordInputIcon" OnAdornmentClick="ShowPassword" AdornmentAriaLabel="Show Password"></MudTextField>
                        </MudItem>
                        <MudItem xs="1">
                            <MudTooltip Placement="Placement.Top" Text="Password must contains 6 characters, digit (0-9), uppercase(A-Z) and special character.">
                                <MudIconButton Style="color:#08243D;" Icon="@Icons.Material.Outlined.Info" />
                            </MudTooltip>
                        </MudItem>
                        <MudItem xs="6">
                            <MudTextField Label="Confirm Password" @bind-Value="resetPassword.ConfirmPassword" Required="true" Margin="Margin.Dense" Variant="Variant.Outlined" For="@(()=>resetPassword.ConfirmPassword)"></MudTextField>
                        </MudItem>
                    <MudItem xs="12">
                        <MudFab Size="Size.Medium" ButtonType="ButtonType.Submit" Style="background-color: #689F38; color: #FFFFFF; text-transform:none;" Class="mt-4" Label="&nbsp;&nbsp;Submit&nbsp;&nbsp;" />
                    </MudItem>
                    </MudGrid>
                </EditForm>
            </MudItem>
        </MudGrid>
    </MudItem>
</MudGrid>


@code {
    [Parameter]
    public string? Token { get; set; }

    Entertainmentcareers.net.Shared.ResetPassword resetPassword = new Entertainmentcareers.net.Shared.ResetPassword();

    private bool isShow { get; set; }
    InputType PasswordInput = InputType.Password;
    string PasswordInputIcon = Icons.Material.Filled.VisibilityOff;

    void ShowPassword()
    {
        @if (isShow)
        {
            isShow = false;
            PasswordInputIcon = Icons.Material.Filled.VisibilityOff;
            PasswordInput = InputType.Password;
        }
        else
        {
            isShow = true;
            PasswordInputIcon = Icons.Material.Filled.Visibility;
            PasswordInput = InputType.Text;
        }
    }

    public async Task HandleSubmit()
    {
        if(Token.Length>0)
        {
            resetPassword.Token = Token;
        }
        
        var response = await Http.PostAsJsonAsync($"api/ApplicationUser/resetpassword", resetPassword);
        if (response.StatusCode == System.Net.HttpStatusCode.BadRequest)
        {
            snackBar.Add("Email not found. Please try again.", Severity.Error);
        }
        if (!response.IsSuccessStatusCode)
        {
            snackBar.Add("Password reseted successfully.", Severity.Success);
            navigationManager.NavigateTo("/signin");
        }
    }
}


